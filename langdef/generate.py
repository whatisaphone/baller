#!/usr/bin/env python

import csv
from pathlib import Path

###################################### vm ######################################

operand_map = {
    'u8': 'u8',
    'i16': 'i16',
    'i32': 'i32',
    'rel': 'relative_offset',
    'var': 'variable',
    'str': 'string',
}

op_names = []
inss = []

with open(Path(__file__).parent / 'vm.csv') as f:
    rows = list(csv.reader(f))
assert rows[0] == ['opcode', 'name', 'operands', 'target_min', 'target_max']
for opcodes_str, name, operands_str, target_min, target_max in rows[1:]:
    opcode = [int(b, 16) for b in opcodes_str.split()]
    operands = [operand_map[o] for o in operands_str.split()]
    if name not in op_names:
        op_names.append(name)
    inss.append((target_min or '90', target_max or '100', opcode, name, operands))

print("""// Automatically generated by langdef/generate.py

const games = @import("games.zig");
const script = @import("script.zig");
const utils = @import("utils.zig");

pub const max_operands = 3;

pub const Ins = struct {
    opcode: utils.TinyArray(u8, 3),
    op: Op,
    operands: utils.TinyArray(Operand, 3),
    target_min: games.Target,
    target_max: games.Target,
};

pub const Operand = enum {
    u8,
    i16,
    i32,
    relative_offset,
    variable,
    string,
};

pub const Op = enum {""")
for name in op_names:
    print(f'    @"{name}",')
print("""};

pub const inss: []const Ins = &.{""")
for target_min, target_max, opcode, name, operands in inss:
    print('    .{ .opcode = .init(&.{', end='')
    print(', '.join(f'0x{b:02x}' for b in opcode), end='')
    print(f'}}), .op = .@"{name}"', end='')
    print(', .operands = .init(&.{', end='')
    print(', '.join(f'.{o}' for o in operands), end='')
    print(f'}}), .target_min = .sputm{target_min}', end='')
    print(f', .target_max = .sputm{target_max} }},')
print('};')

#################################### calls #####################################

calls = []

with open(Path(__file__).parent / 'script.csv') as f:
    rows = list(csv.reader(f))
assert rows[0] == ['name', 'call', 'params', 'target_min', 'target_max']
for name, call_str, params_str, target_min, target_max in rows[1:]:
    call = {'false': False, 'true': True}[call_str]
    params = params_str.split()
    calls.append((name, call, params, target_min or '90', target_max or '100'))

print("""
pub const Call = struct {
    op: Op,
    call: bool,
    params: []const script.Param,
    target_min: games.Target,
    target_max: games.Target,
};

pub const calls: []const Call = &.{""")
for name, call, params, target_min, target_max in calls:
    print(f'    .{{ .op = .@"{name}"', end='')
    print(', .call = ' + ('true' if call else 'false'), end='')
    print(', .params = &.{', end='')
    print(', '.join(f'.{p}' for p in params), end='')
    print(f'}}, .target_min = .sputm{target_min}', end='')
    print(f', .target_max = .sputm{target_max} }},')
print('};')

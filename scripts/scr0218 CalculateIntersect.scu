; SCRP 218 CalculateIntersect

parameter box_num
parameter face: CollideFace
parameter cell_x
parameter cell_z

local variable local4
local variable local5
local variable px
local variable py
local variable pz
local variable normal_field: CollideBoxField
local variable nx
local variable ny
local variable nz
local variable local20

gCurBox = gCollideBoxes[box_num]
case face {
    of FACE-FRONT {
        px = gCurBox[BOX-P3-X]
        py = gCurBox[BOX-P3-Y]
        pz = gCurBox[BOX-P3-Z]
        normal_field = BOX-FRONT-NORMAL-X
    }
    of FACE-LEFT {
        px = gCurBox[BOX-P1-X]
        py = gCurBox[BOX-P1-Y]
        pz = gCurBox[BOX-P1-Z]
        normal_field = BOX-LEFT-NORMAL-X
    }
    of FACE-RIGHT {
        px = gCurBox[BOX-P3-X]
        py = gCurBox[BOX-P3-Y]
        pz = gCurBox[BOX-P3-Z]
        normal_field = BOX-RIGHT-NORMAL-X
    }
    of FACE-BACK {
        px = gCurBox[BOX-P4-X]
        py = gCurBox[BOX-P4-Y]
        pz = gCurBox[BOX-P4-Z]
        normal_field = BOX-BACK-NORMAL-X
    }
    of FACE-TOP {
        px = gCurBox[BOX-P4-X]
        py = gCurBox[BOX-P4-Y]
        pz = gCurBox[BOX-P4-Z]
        normal_field = BOX-TOP-NORMAL-X
    }
}
gCollideNextPosX = gCollideNextPosX - 2900 * (cell_x - 1)
gCollideNextPosZ = gCollideNextPosZ - 2900 * (cell_z - 1)
gCollideCurPosX = gCollideCurPosX - 2900 * (cell_x - 1)
gCollideCurPosZ = gCollideCurPosZ - 2900 * (cell_z - 1)
px = px - 2900 * (cell_x - 1)
pz = pz - 2900 * (cell_z - 1)
nx = gCurBox[normal_field]
ny = gCurBox[normal_field + 1]
nz = gCurBox[normal_field + 2]
local4 = nx * (px - gCollideCurPosX) + ny * (py - gCollideCurPosY) + nz * (pz - gCollideCurPosZ)
local5 = nx * (gCollideNextPosX - gCollideCurPosX) + ny * (gCollideNextPosY - gCollideCurPosY) + nz * (gCollideNextPosZ - gCollideCurPosZ)
local20 = 0
if (local5 != 0) {
    if (!(local4 / local5)) {
        local20 = 1
    }
}
if (local20) {
    gCollideIntersectValid = true
    gCollideIntersectX = (gCollideCurPosX * local5 + local4 * (gCollideNextPosX - gCollideCurPosX)) / local5
    gCollideIntersectY = (gCollideCurPosY * local5 + local4 * (gCollideNextPosY - gCollideCurPosY)) / local5
    gCollideIntersectZ = (gCollideCurPosZ * local5 + local4 * (gCollideNextPosZ - gCollideCurPosZ)) / local5
    gCollideIntersectX = gCollideIntersectX + 2900 * (cell_x - 1)
    gCollideIntersectZ = gCollideIntersectZ + 2900 * (cell_z - 1)
} else {
    gCollideIntersectValid = false
    gCollideIntersectX = 0
    gCollideIntersectY = 0
    gCollideIntersectZ = 0
}
gCollideNextPosX = gCollideNextPosX + 2900 * (cell_x - 1)
gCollideNextPosZ = gCollideNextPosZ + 2900 * (cell_z - 1)
gCollideCurPosX = gCollideCurPosX + 2900 * (cell_x - 1)
gCollideCurPosZ = gCollideCurPosZ + 2900 * (cell_z - 1)
free-script
